{% comment %}
  This file is auto-generated by OpenStore. The content will be overridden. Please do not update this file directly.

  This is a generic liquid snippet that all storefronts share and render. It
  should be included in storefront theme configuration once and generally never
  touched again. It bootstraps necessary Shopify data and initializes
  storefront script loader.

  NOTE: `<meta name="next-head-count" content="0"/>` tag was added to make
  next.js compiled applications work. Without it the application will start
  infinite loop trying to insert header meta tags.
{% endcomment %}
{%- if template -%}
  <script data-type="template" type="application/json">
    {{- template | json -}}
  </script>
{% endif %}
{%- if cart -%}
  <script data-type="cart" type="application/json">
    {{- cart | json -}}
  </script>
{% endif %}
{%- if customer -%}
  <script data-type="customer" type="application/json">
    {
      "id": "{{- customer.id | json -}}",
      "email": {{- customer.email | json -}},
      "name": {{- customer.name | json -}},
      "first_name": {{- customer.first_name | json -}},
      "last_name": {{- customer.last_name | json -}},
      "phone": {{- customer.phone | json -}},
      "city": {{- customer.default_address.city | json -}},
      "zip": {{- customer.default_address.zip | json -}},
      "address1": {{- customer.default_address.address1 | json -}},
      "address2": {{- customer.default_address.address2 | json -}},
      "country": {{- customer.default_address.country | json -}},
      "province": {{- customer.default_address.province | json -}},
      "province_code": {{- customer.default_address.province_code | json -}},
      "orders_count": "{{- customer.orders_count | json -}}",
      "total_spent": "{{- customer.total_spent | times: 0.01 | json -}}",
      "tags": {{- customer.tags | join: ', ' | json -}}
    }
  </script>
{% endif %}
{%- if checkout -%}
  <script data-type="checkout" type="application/json">
    {
      "customer": {
        "id": {{- checkout.customer.id | json -}},
        "accepts_marketing": {{- checkout.customer.accepts_marketing | json -}},
        "addresses": {{- checkout.customer.addresses | json -}},
        "addresses_count": {{- checkout.customer.addresses_count | json -}},
        "default_address": {{- checkout.customer.default_address | json -}},
        "first_name": {{- checkout.customer.first_name | json -}},
        "has_account": {{- checkout.customer.has_account | json -}},
        "last_name": {{- checkout.customer.last_name | json -}},
        "name": {{- checkout.customer.name | json -}},
        "orders_count": {{- checkout.customer.orders_count | json -}},
        "phone": {{- checkout.customer.phone | json -}},
        "tags": {{- checkout.customer.tags | json -}},
        "tax_exempt": {{- checkout.customer.tax_exempt | json -}},
        "total_spent": {{- checkout.customer.total_spent | json -}}
      },
      "line_items": [
        {%- for line_item in checkout.line_items -%}
        {
          "compare_at_price": "{{- line_item.variant.compare_at_price | json -}}",
          "position": {{- forloop.index0 -}},
          "sku": {{- line_item.sku | json -}},
          "type": {{- line_item.product.type | json -}},
          "product_id": {{- line_item.product_id | json -}},
          "variant_id": "{{- line_item.variant_id -}}",
          "title": {{- line_item.product.title | json -}},
          "vendor": {{- line_item.vendor | json -}},
          "variant": {{- line_item.variant | json -}}
          "final_price": "{{- line_item.final_price | json -}}",
          "quantity": "{{- line_item.quantity | json -}}",
          "image": "{{- line_item.image | image_url -}}",
          "osUserId": "{{ line_item.properties._os_user_id }}",
          "osAnonymousId": "{{ line_item.properties._os_anonymous_id }}"
        }{% unless forloop.last %},{% endunless %}
        {%- endfor -%}
      ],
      ],
      "id": {{- checkout.id | json -}},
      "total_price": {{- checkout.total_price | json -}},
      "order": {{- checkout.order | json -}},
      "order_id": {{- checkout.order_id | json -}},
      "order_name": {{- checkout.order_name | json -}},
      "order_number": {{- checkout.order_number | json -}},
      "email": "{{ checkout.email }}"
    }
  </script>
{% endif %}
{%- if search -%}
  <script data-type="search" type="application/json">
    {{- search | json -}}
  </script>
{% endif %}
{%- if shop -%}
  <script data-type="shop" type="application/json">
    {
      "id": {{- shop.id | json -}},
      "name": "{{- shop.name -}}",
      "domain": {{- shop.domain | json -}},
      "permanent_domain": {{- shop.permanent_domain | json -}},
      "url": {{- shop.url | json -}}
    }
  </script>
{% endif %}
{%- if theme -%}
  <script data-type="theme" type="application/json">
    {
      "id": {{- theme.id | json -}},
      "name": {{- theme.name | json -}}
    }
  </script>
{% endif %}
{%- if routes -%}
  <script data-type="routes" type="application/json">
    {
      "account_addresses_url": "{{ routes.account_addresses_url }}",
      "account_login_url": "{{ routes.account_login_url }}",
      "acount_logout_url": "{{ routes.acount_logout_url }}",
      "account_recover_url": "{{ routes.account_recover_url }}",
      "account_register_url": "{{ routes.account_register_url }}",
      "account_url": "{{ routes.account_url }}",
      "all_products_collection_url": "{{ routes.all_products_collection_url }}",
      "cart_add_url": "{{ routes.cart_add_url }}",
      "cart_change_url": "{{ routes.cart_change_url }}",
      "cart_clear_url": "{{ routes.cart_clear_url }}",
      "cart_url": "{{ routes.cart_url }}",
      "collections_url": "{{ routes.collections_url }}",
      "predictive_search_url": "{{ routes.predictive_search_url }}",
      "product_recommendations_url": "{{ routes.product_recommendations_url }}",
      "root_url": "{{ routes.root_url }}",
      "search_url": "{{ routes.search_url }}"
    }
  </script>
{% endif %}

{% capture snippet_content %}{% render 'os-tag-manager-data' %}{% endcapture %}
{% if snippet_content contains 'Could not find asset' %}
  {% comment %} do nothing {% endcomment %}
{% else %}
  {% render 'os-tag-manager-data' %}
{% endif %}

<script type="module" crossorigin src="https://os-tag-manager.vercel.app/assets/index.js"></script>
<link rel="modulepreload" crossorigin href="https://os-tag-manager.vercel.app/assets/vendor.js">
<link rel="modulepreload" crossorigin href="https://os-tag-manager.vercel.app/assets/ui.js">
<link rel="stylesheet" href="https://os-tag-manager.vercel.app/assets/vendor.css">
<link rel="stylesheet" href="https://os-tag-manager.vercel.app/assets/ui.css">
<link rel="stylesheet" href="https://os-tag-manager.vercel.app/assets/index.css">

<script>
  (function (w) {
    const scriptSrcsToBlock = [
      'https://pixeleze.com',
      'https://shopify-gtm-suite.getelevar.com',
      'https://ssapi.',
      'https://www.google-analytics.com',
      'https://analytics.tiktok.com',
      'https://www.googletagmanager.com',
    ];
    const isFromDatadogTest = w._DATADOG_SYNTHETICS_BROWSER;
    if (!isFromDatadogTest) {
      return;
    }
    console.log('DISABLING MARKETING SCRIPTS');
    const shouldBlock = (src) => {
      return scriptSrcsToBlock.some((script) => src.startsWith(script));
    };
    const createElementBackup = document.createElement;
    document.createElement = function (...args) {
      if (args[0].toLowerCase() !== 'script') return createElementBackup.bind(document)(...args);
      const scriptElt = createElementBackup.bind(document)(...args);
      const originalSetAttribute = scriptElt.setAttribute.bind(scriptElt);
      Object.defineProperties(scriptElt, {
        src: {
          configurable: !0,
          get() {
            return scriptElt.getAttribute('src');
          },
          set(value) {
            originalSetAttribute('src', value);
            if (shouldBlock(value)) {
              originalSetAttribute('type', 'javascript/blocked');
            } else if (scriptElt.getAttribute('type')) {
              originalSetAttribute('type', scriptElt.getAttribute('type'));
            }
            return !0;
          },
        },
        type: {
          configurable: !0,
          set(value) {
            if (scriptElt.getAttribute('src') && !shouldBlock(scriptElt.getAttribute('src'))) {
              originalSetAttribute('type', value);
            }
            return !0;
          },
        },
      });
      return scriptElt;
    };
    const observer = new MutationObserver((mutations) => {
      mutations.forEach(({ addedNodes }) => {
        addedNodes.forEach((node) => {
          if (node.nodeType === 1 && node.tagName === 'SCRIPT') {
            if (node.src && shouldBlock(node.src)) {
              node.type = 'javascript/blocked';
            }
          }
        });
      });
    });
    observer.observe(document.documentElement, { childList: !0, subtree: !0 });
  })(window);
</script>
